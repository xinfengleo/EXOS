import javax.crypto.BadPaddingException
import javax.crypto.Cipher
import javax.crypto.IllegalBlockSizeException
import javax.crypto.NoSuchPaddingException
import javax.crypto.spec.SecretKeySpec
import java.security.InvalidKeyException
import java.security.NoSuchAlgorithmException

//加密的key
def aesKeyCommen = "fffdefgcvbdefg11"


//加密的资源文件路径
def rawDir ='./app/src/main/res/raw/'
//资源文件临时存储文件夹名称
def tempDir ='./tempDir'
ext {
    AES_KEY = "\""+aesKeyCommen+"\""
}
//拷贝文件夹
void copyFolder(String oldPath, String newPath) {
    try {
        (new File(newPath)).mkdirs(); //如果文件夹不存在 则建立新文件夹
        File a = new File(oldPath);
        String[] file = a.list();
        File temp = null;
        for (int i = 0; i < file.length; i++) {
            if (oldPath.endsWith(File.separator)) {
                temp = new File(oldPath + file[i]);
            } else {
                temp = new File(oldPath + File.separator + file[i]);
            }
            if (temp.isFile()) {
                FileInputStream input = new FileInputStream(temp);
                FileOutputStream output = new FileOutputStream(newPath + "/" +
                        (temp.getName()).toString());
                byte[] b = new byte[1024 * 5];
                int len;
                while ((len = input.read(b)) != -1) {
                    output.write(b, 0, len);
                }
                output.flush();
                output.close();
                input.close();
            }
            if (temp.isDirectory()) {//如果是子文件夹
                copyFolder(oldPath + "/" + file[i], newPath + "/" + file[i]);
            }
        }
    }
    catch (Exception e) {
        println("复制整个文件夹内容操作出错");
        e.printStackTrace();
    }
}
//删除文件夹
void deleteAllFilesOfDir(String path) {
    File file=new File(path);
    if (!file.exists())
        return;
    if (file.isFile()) {
        file.delete();
        return;
    }
    File[] files = file.listFiles();
    for (int i = 0; i < files.length; i++) {
        deleteAllFilesOfDir(files[i].getAbsolutePath());
    }
    file.delete();
}
static String txt2String(File file){
    String result = "";
    try {
        InputStream s = new FileInputStream(file);
        //获取文件的字节数
        int lenght = s.available();
        //创建byte数组
        byte[]  buffer = new byte[lenght];
        //将文件中的数据读到byte数组中
        s.read(buffer);
        result = new String(buffer,"utf-8");
    } catch (Exception e) {
        e.printStackTrace();
    }
    return result;
}

//加密算法
private static byte[] encrypt(String content, String password) {
    try {
        byte[] keyStr = getKey(password);
        SecretKeySpec key = new SecretKeySpec(keyStr, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//algorithmStr
        byte[] byteContent = content.getBytes("utf-8");
        cipher.init(Cipher.ENCRYPT_MODE, key);//   ʼ
        byte[] result = cipher.doFinal(byteContent);
        return result; //
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    } catch (BadPaddingException e) {
        e.printStackTrace();
    }
    return null;
}
//解密算法
private static byte[] decrypt(byte[] content, String password) {
    try {
        byte[] keyStr = getKey(password);
        SecretKeySpec key = new SecretKeySpec(keyStr, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//algorithmStr
        cipher.init(Cipher.DECRYPT_MODE, key);//   ʼ
        byte[] result = cipher.doFinal(content);
        return result; //
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    } catch (BadPaddingException e) {
        e.printStackTrace();
    }
    return null;
}
private static byte[] getKey(String password) {
    byte[] rByte = null;
    if (password!=null) {
        rByte = password.getBytes();
    }else{
        rByte = new byte[24];
    }
    return rByte;
}
//二进制转16进制
static String parseByte2HexStr(byte[] buf) {
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < buf.length; i++) {
        String hex = Integer.toHexString(buf[i] & 0xFF);
        if (hex.length() == 1) {
            hex = '0' + hex;
        }
        sb.append(hex.toUpperCase());
    }
    return sb.toString();
}
static byte[] parseHexStr2Byte(String hexStr) {
    if (hexStr.length() < 1)
        return null;
    byte[] result = new byte[hexStr.length() / 2];
    for (int i = 0; i < hexStr.length() / 2; i++) {
        int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
        int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2),
                16);
        result[i] = (byte) (high * 16 + low);
    }
    return result;
}
//加密方法
static String encodeContent(String content, String keyBytes){
    //加密之后的字节数组,转成16进制的字符串形式输出
    return parseByte2HexStr(encrypt(content, keyBytes));
}

//解密方法
static String decodeContent(String content, String keyBytes){
    //解密之前,先将输入的字符串按照16进制转成二进制的字节数组,作为待解密的内容输入
    byte[] b = decrypt(parseHexStr2Byte(content), keyBytes);
    return new String(b);
}
//projectsEvaluated里调用的方法  aesKey： key  rawDir：加密的文件夹
void encodeDir(String rawDir, String aesKey){
    println "do 加密代码"
    File searchPlug = new File(rawDir);
    if (searchPlug.exists() && searchPlug.isDirectory()) {
        File[] files = searchPlug.listFiles()
        for (File file : files) {
            println file.name
            if(file.name.endsWith(".json")){
                String str=txt2String(file)
                def content = encodeContent(str, aesKey)
                //def result = decodeContent(content, aesKey)
                //println(" 原始文件:content"+str)
                //println(" 加密后文件:content"+content)
                //println(" 解密后文件:content"+result)
                def stream = file.newOutputStream()
                stream.write(content.bytes)
                stream.flush()
            }
        }
    }else{
        println "文件夹不存在"
    }
}

gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
        println "buildStarted"
    }
    @Override
    void settingsEvaluated(Settings settings) {
        println "settingsEvaluated"

    }
    @Override
    void projectsLoaded(Gradle gradle) {
        println "projectsLoaded"

    }
    @Override
    void projectsEvaluated(Gradle gradle) {
        println "projectsEvaluated"
        copyFolder(rawDir,tempDir)
        encodeDir(rawDir,aesKeyCommen)
    }
    @Override
    void buildFinished(BuildResult buildResult) {
        copyFolder(tempDir,rawDir);
        deleteAllFilesOfDir(tempDir);
    }
})